{% extends 'layout.html.twig' %}

{% block title %}Courses - eGENIUS{% endblock %}

{% block css %}
    <link rel="stylesheet" href="{{ asset('css/bootstrap.min.css') }}" onerror="this.remove()">
    <link rel="stylesheet" href="{{ asset('css/fontawesome.min.css') }}" onerror="this.remove()">
    <link rel="stylesheet" href="{{ asset('css/animate.min.css') }}" onerror="this.remove()">
    <link rel="stylesheet" href="{{ asset('css/custom.css') }}">
    <style>
        .btn-icon {
            width: 40px;
            height: 40px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            background: none;
            border: none;
        }
        .btn-icon img {
            width: 24px;
            height: 24px;
            object-fit: contain;
        }
        .btn-icon + .btn-icon {
            margin-left: 5px;
        }
        .btn-primary.btn-icon img { }
        .btn-success.btn-icon img { filter: brightness(0.3) sepia(1) hue-rotate(80deg) saturate(5); }
        .btn-danger.btn-icon img { filter: brightness(0.4) sepia(1) hue-rotate(340deg) saturate(6); }
        .btn-like {
            background: none;
            border: none;
            position: relative;
        }
        .btn-like img {
            width: 24px;
            height: 24px;
        }
        .btn-like.liked img { filter: brightness(0) saturate(100%) invert(17%) sepia(98%) saturate(7459%) hue-rotate(358deg) brightness(92%) contrast(114%); }
        .icon-actions {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .fade {
            animation: fadeIn 0.3s ease-in-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .error-message {
            display: none;
            color: #dc3545;
            font-size: 0.8em;
            position: absolute;
            bottom: -20px;
            left: 0;
        }
        .btn-like.error .error-message {
            display: block;
        }
        .btn-like.loading img {
            opacity: 0.5;
        }
        /* Custom alert styles */
        .custom-alert {
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 10px;
            text-align: center;
            font-weight: bold;
            animation-duration: 0.5s;
        }
        .success-alert {
            background-color: #d4edda;
            color: #155724;
            border: 2px solid #c3e6cb;
            animation-name: bounce;
        }
        .error-alert {
            background-color: #f8d7da;
            color: #721c24;
            border: 2px solid #f5c6cb;
            animation-name: wobble;
        }
        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
            40% { transform: translateY(-10px); }
            60% { transform: translateY(-5px); }
        }
        @keyframes wobble {
            0% { transform: translateX(0); }
            15% { transform: translateX(-5px) rotate(-5deg); }
            30% { transform: translateX(3px) rotate(3deg); }
            45% { transform: translateX(-3px) rotate(-3deg); }
            60% { transform: translateX(2px) rotate(2deg); }
            75% { transform: translateX(-1px) rotate(-1deg); }
            100% { transform: translateX(0); }
        }
    </style>
{% endblock %}

{% block body %}
    <section class="courses-header animate__animated animate__fadeIn">
        <div class="container text-center">
            <h1 class="display-4 fw-bold">Explore Our Courses</h1>
            <p class="lead">Discover a wide range of numerical analysis courses to enhance your skills.</p>
        </div>
    </section>

    <section class="courses-content py-5">
        <div class="container">
        {% for message in app.flashes('success') %}
    <div class="custom-flash success-flash animate__animated animate__fadeIn" role="alert">
        <span class="flash-icon">ðŸŽ‰</span> Woo-hoo, you nailed it! {{ message }}
    </div>
{% endfor %}
{% for message in app.flashes('error') %}
    <div class="custom-flash error-flash animate__animated animate__fadeIn" role="alert">
        <span class="flash-icon">ðŸ˜±</span> Oops, we tripped over a brain cell! {{ message }}
    </div>
{% endfor %}
            <div class="row g-4">
                {% for course in courses %}
                    <div class="col-lg-4 col-md-6">
                        <div class="course-card card shadow-sm rounded-3 overflow-hidden">
                            <img src="{{ course.image ? asset('Uploads/images/' ~ course.image) : 'https://via.placeholder.com/400x200?text=' ~ course.title }}" alt="{{ course.title }}" class="card-img-top">
                            <div class="card-body p-4">
                                <h5 class="card-title fw-bold">{{ course.title }}</h5>
                                <p class="card-text">Parts: {{ course.parts|length }}</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <a href="{{ path('app_course_details', {'id': course.id}) }}" class="btn btn-primary btn-icon cta-button" title="View Course">
                                        <img src="{{ asset('Uploads/images/icons/view-icon.png') }}" alt="View">
                                    </a>
                                    <div class="icon-actions">
                                        {% if is_granted('ROLE_ADMIN') or (is_granted('ROLE_TEACHER') and course.createdBy == app.user) %}
                                            <a href="{{ path('app_course_update', {'id': course.id}) }}" class="btn btn-icon cta-button" title="Update">
                                                <img src="{{ asset('Uploads/images/icons/edit-icon.png') }}" alt="Edit">
                                            </a>
                                            <form action="{{ path('app_course_delete', {'id': course.id}) }}" method="post" onsubmit="return confirm('Are you sure you want to delete this course? This action cannot be undone.');" class="mb-0">
                                                <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ course.id) }}">
                                                <button type="submit" class="btn btn-danger btn-icon cta-button" title="Delete">
                                                    <img src="{{ asset('Uploads/images/icons/trash-icon.png') }}" alt="Delete">
                                                </button>
                                            </form>
                                        {% endif %}
                                        <button class="btn btn-like like-button {{ course.isLikedByUser(app.user) ? 'liked' : '' }}"
                                                data-course-id="{{ course.id }}"
                                                data-user-id="1"
                                                title="{{ course.isLikedByUser(app.user) ? 'Unlike' : 'Like' }}">
                                            <img src="{{ asset('Uploads/images/icons/heart-icon.png') }}" alt="Like">
                                            <span class="like-count">{{ course.getLikeCount }}</span>
                                            <span class="error-message">Error liking course</span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                {% else %}
                    <div class="col-12 text-center">
                        <p class="text-muted">No courses available.</p>
                    </div>
                {% endfor %}
            </div>
        </div>
    </section>

  
{% endblock %}

{% block js %}
    <script src="{{ asset('js/bootstrap.bundle.min.js') }}" onerror="this.remove()"></script>
    <script src="{{ asset('js/main.js') }}" onerror="this.remove()"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const likeButtons = document.querySelectorAll('.like-button');

            likeButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    if (this.disabled) return;
                    this.disabled = true;
                    this.classList.add('loading');

                    const courseId = this.getAttribute('data-course-id');
                    const userId = this.getAttribute('data-user-id');
                    const likeCountSpan = this.querySelector('.like-count');
                    const errorMessage = this.querySelector('.error-message');
                    const isLiked = this.classList.contains('liked');
                    let newLikeCount = parseInt(likeCountSpan.textContent) || 0;
                    const originalState = { isLiked, likeCount: newLikeCount };

                    // Optimistic UI update
                    this.classList.toggle('liked');
                    newLikeCount = isLiked ? newLikeCount - 1 : newLikeCount + 1;
                    likeCountSpan.textContent = newLikeCount;
                    likeCountSpan.classList.add('fade');
                    this.title = isLiked ? 'Like' : 'Unlike';

                    setTimeout(() => likeCountSpan.classList.remove('fade'), 300);

                    // Validate courseId
                    if (!/^\d+$/.test(courseId)) {
                        this.classList.toggle('liked', originalState.isLiked);
                        likeCountSpan.textContent = originalState.likeCount;
                        this.title = originalState.isLiked ? 'Unlike' : 'Like';
                        errorMessage.textContent = 'Invalid course ID';
                        errorMessage.style.display = 'block';
                        this.classList.add('error');
                        setTimeout(() => {
                            errorMessage.style.display = 'none';
                            this.classList.remove('error');
                            this.classList.remove('loading');
                            this.disabled = false;
                        }, 2000);
                        return;
                    }

                    // Construct URL dynamically
                    const baseUrl = '/course/';
                    const url = `${baseUrl}${courseId}/like`;

                    fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({ user_id: userId })
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.text().then(text => {
                                throw new Error(`HTTP error! status: ${response.status}, body: ${text.substring(0, 100)}`);
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            likeCountSpan.textContent = data.likeCount;
                            this.classList.toggle('liked', data.isLiked);
                            this.title = data.isLiked ? 'Unlike' : 'Like';
                            errorMessage.style.display = 'none';
                            this.classList.remove('error');
                        } else {
                            throw new Error(data.error || 'Invalid response format');
                        }
                    })
                    .catch(error => {
                        console.error('Like error:', error);
                        this.classList.toggle('liked', originalState.isLiked);
                        likeCountSpan.textContent = originalState.likeCount;
                        this.title = originalState.isLiked ? 'Unlike' : 'Like';
                        errorMessage.textContent = error.message || 'Error liking course';
                        errorMessage.style.display = 'block';
                        this.classList.add('error');
                        setTimeout(() => {
                            errorMessage.style.display = 'none';
                            this.classList.remove('error');
                        }, 2000);
                    })
                    .finally(() => {
                        this.classList.remove('loading');
                        this.disabled = false;
                    });
                });
            });
        });
    </script>
{% endblock %}